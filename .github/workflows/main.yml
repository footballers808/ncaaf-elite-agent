name: Main Run

on:
  schedule:
    - cron: "23 11 * * 5"
  workflow_dispatch:
    inputs:
      backfill_years:
        description: "How many seasons to backfill (0, 1, 3, 5)"
        required: false
        default: "0"
        type: choice
        options: ["0", "1", "3", "5"]

permissions:
  contents: write

concurrency:
  group: ncaaf-elite-agent-${{ github.ref_name }}
  cancel-in-progress: false

env:
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

  # ---- CFBD auth + rate limiting ----
  CFBD_API_KEY: ${{ secrets.CFBD_API_KEY }}
  CFBD_MAX_RETRIES: "10"
  CFBD_BACKOFF_BASE_SEC: "0.8"
  CFBD_THROTTLE_MS: "400"

  # ---- Cache scopes ----
  CFBD_CACHE_SCOPE: cfbd-http-v1
  PENALTY_CACHE_SCOPE: penalties-Linux-v1

  BACKFILL_YEARS: ${{ inputs.backfill_years || '0' }}

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt

      - name: Restore CFBD/requests cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/requests_cache
            .cache/requests_cache
          key: ${{ env.CFBD_CACHE_SCOPE }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.CFBD_CACHE_SCOPE }}-

      - name: Sanity import check
        run: |
          python - <<'PY'
          import importlib
          for m in [
            "src.tools.validate_config","src.data_penalties","src.features",
            "src.predict","src.labeler","src.learn","src.reporter",
          ]:
              importlib.import_module(m)
          print("imports ok")
          PY

      - name: Show run config
        run: |
          echo "CFBD key present: $([ -n "$CFBD_API_KEY" ] && echo yes || echo no)"
          echo "retries=$CFBD_MAX_RETRIES throttle_ms=$CFBD_THROTTLE_MS backoff=$CFBD_BACKOFF_BASE_SEC"
          echo "backfill_years=${BACKFILL_YEARS}"
          head -c 200 config.yaml || true
          echo

      # =========================
      #   BACKFILL (OPTIONAL)
      # =========================
      - name: Backfill penalties (optional)
        id: backfill
        if: env.BACKFILL_YEARS != '0'
        continue-on-error: true
        run: |
          set -e
          echo "== requested backfill years: ${BACKFILL_YEARS} =="
          python -m src.data_penalties --years ${BACKFILL_YEARS} --windows 3,5,10 --strict

      - name: Explain backfill failure (if any) and proceed if possible
        if: always()
        run: |
          if [ "${{ steps.backfill.outcome || 'success' }}" = "failure" ]; then
            echo "::warning::Backfill failed (likely 429 quota). Will continue if features already exist."
          fi

      - name: Save penalty features cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: artifacts/features
          key: ${{ env.PENALTY_CACHE_SCOPE }}-${{ github.sha }}

      # =========================
      #   FEATURE CHECK & BRANCH
      # =========================
      - name: Check features presence
        id: featcheck
        run: |
          if [ -f artifacts/features/penalties.parquet ]; then
            echo "present=true" >> $GITHUB_OUTPUT
            echo "Found features."
          else
            echo "present=false" >> $GITHUB_OUTPUT
            echo "No features file found."
          fi

      - name: Write placeholder report (no features)
        if: steps.featcheck.outputs.present == 'false'
        run: |
          mkdir -p artifacts
          cat > artifacts/report.md <<'MD'
          # NCAAF Elite Agent

          **No features available.**  
          Backfill is disabled or failed (429 API quota).  
          To produce predictions:
          1. Re-run this workflow with `backfill_years=1` after your CFBD quota resets (or with a higher-limit key).
          2. Then warm with `3`, then `5` if desired.
          3. Or upload a cached `artifacts/features/penalties.parquet` from a prior run.

          The rest of the pipeline was skipped automatically to avoid hard failures.
          MD
          echo "Wrote placeholder report."

      # =========================
      #   PREDICT / LABEL / LEARN (only if features present)
      # =========================
      - name: Predict (scores + win prob)
        if: steps.featcheck.outputs.present == 'true'
        run: |
          set -e
          python -m src.predict --features artifacts/features/penalties.parquet --out artifacts/preds.parquet

      - name: Label completed games
        if: steps.featcheck.outputs.present == 'true'
        run: |
          set -e
          Y=$(date -u +%Y)
          python -m src.labeler --year "$Y" --season-type regular

      - name: News enrichment (optional)
        if: steps.featcheck.outputs.present == 'true'
        run: |
          set -e
          if [ -f data/news_feed.csv ]; then
            python -m src.news --in data/news_feed.csv --out artifacts/features/news.parquet
          else
            echo "No data/news_feed.csv; skipping news enrichment"
          fi

      - name: Learn (strict, real data)
        if: steps.featcheck.outputs.present == 'true'
        run: |
          set -e
          if [ -f artifacts/labels.parquet ]; then
            python -m src.learn --features artifacts/features/penalties.parquet --labels artifacts/labels.parquet --out artifacts/model.joblib
          else
            echo "No labels yet; skipping learn"
          fi

      - name: Report
        run: |
          set -e
          if [ -f artifacts/preds.parquet ]; then
            python -m src.reporter --preds artifacts/preds.parquet --out artifacts/report.md
          elif [ ! -f artifacts/report.md ]; then
            printf "# NCAAF Elite Agent\n\n(no predictions this run)\n" > artifacts/report.md
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-artifacts
          path: |
            artifacts/**
            tuning-results/**
          if-no-files-found: ignore
