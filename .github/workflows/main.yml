name: NCAAF Elite Agent

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "auto | predict | learn | backtest | tune"
        required: true
        default: "auto"
        type: choice
        options: ["auto","predict","learn","backtest","tune"]
      iso_week:
        description: "ISO week, e.g. 2025-W06 (optional)"
        required: false
        default: ""
      pr_apply:
        description: "When tuning, open PR to apply best_config"
        required: false
        default: "false"

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      CFBD_API_KEY: ${{ secrets.CFBD_API_KEY }}
      EMAIL_TO:     ${{ secrets.EMAIL_TO }}
      EMAIL_FROM:   ${{ secrets.EMAIL_FROM }}
      EMAIL_PASS:   ${{ secrets.EMAIL_PASS }}
      SMTP_HOST:    ${{ secrets.SMTP_HOST }}
      SMTP_PORT:    ${{ secrets.SMTP_PORT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Restore penalty features cache
        uses: actions/cache/restore@v4
        with:
          key: penalties-${{ runner.os }}-v1-${{ hashFiles('src/**', 'config.yaml') }}
          restore-keys: |
            penalties-${{ runner.os }}-v1-
          path: |
            artifacts/features
            ~/.cache/requests_cache

      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else \
            pip install pandas numpy scikit-learn pyarrow requests requests-cache pyyaml joblib optuna; fi

      - name: Ensure package in src/ (importable)
        run: |
          test -f src/__init__.py || touch src/__init__.py
          mkdir -p src/tools
          test -f src/tools/__init__.py || touch src/tools/__init__.py

      - name: Bootstrap config (if missing)
        run: |
          if [ ! -f config.yaml ]; then
            printf "%s\n" \
              "features:" \
              "  windows: [1, 3, 5]" \
              "  use_penalties: true" \
              "" \
              "model:" \
              "  type: logistic" \
              "  params:" \
              "    C: 1.0" \
              "    penalty: l2" \
              "    max_iter: 1000" \
              "" \
              "edges:" \
              "  edge_threshold_spread: 1.5" \
              "  edge_threshold_total: 2.0" \
              "" \
              "tuning:" \
              "  trials: 60" \
              "  pr_apply: false" > config.yaml
          fi

      - name: Apply tuned config if present + validate
        run: |
          set -e
          if [ -f tuning-results/best_config.yaml ]; then cp tuning-results/best_config.yaml config.yaml; fi
          PYTHONPATH="$PWD" python -m src.tools.validate_config --path config.yaml

      - name: Ensure artifacts directories for caching
        run: |
          mkdir -p artifacts/features
          mkdir -p ~/.cache/requests_cache

      # Optional quick warmup (small pull) to speed up cold cache
      - name: Backfill penalties (warmup 2yr, windows 1,3)
        if: ${{ fromJSON('["auto","predict","learn","backtest","tune"]').contains(inputs.mode) }}
        run: |
          python -m src.data_penalties --years 2 --windows 1,3 --strict

      # Full staged windows (incremental script skips what exists)
      - name: Backfill penalties (staged 5-3-1)
        if: ${{ fromJSON('["auto","predict","learn","backtest","tune"]').contains(inputs.mode) }}
        run: |
          python -m src.data_penalties --years 5 --windows 5 --strict
          python -m src.data_penalties --years 5 --windows 3 --strict
          python -m src.data_penalties --years 5 --windows 1 --strict

      - name: Save penalty features cache
        uses: actions/cache/save@v4
        with:
          key: penalties-${{ runner.os }}-v1-${{ hashFiles('src/**', 'config.yaml') }}
          path: |
            artifacts/features
            ~/.cache/requests_cache

      - name: Label
        if: ${{ fromJSON('["auto","learn","backtest","tune"]').contains(inputs.mode) }}
        run: |
          python -m src.labeler

      - name: Learn (fast weekly)
        if: ${{ inputs.mode == 'auto' || inputs.mode == 'learn' }}
        run: |
          python -m src.learn --fast --weeks 6 --snapshot

      - name: Predict (scores + win prob)
        if: ${{ inputs.mode == 'auto' || inputs.mode == 'predict' || inputs.mode == 'learn' }}
        run: |
          python -m src.predict

      - name: Report (email if EMAIL_* present)
        if: ${{ inputs.mode == 'auto' || inputs.mode == 'predict' || inputs.mode == 'learn' }}
        run: |
          python -m src.reporter || true
