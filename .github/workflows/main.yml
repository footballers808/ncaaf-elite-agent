name: NCAAF Elite Agent

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode"
        default: auto
        type: choice
        options: [auto, predict, learn, backtest, tune]
      speed:
        description: "Backfill speed (quick=2→1, full=5→3→1, skip=none). Cron defaults to full."
        default: quick
        type: choice
        options: [quick, full, skip]
  # Nightly full refresh (runs with speed=full automatically)
  schedule:
    - cron: "20 06 * * *" # 06:20 UTC daily — change if you want

permissions:
  contents: read

concurrency:
  group: ncaaf-elite-agent-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ncaaf:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      CFBD_API_KEY: ${{ secrets.CFBD_API_KEY }}
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          set -e
          pip install --upgrade pip
          pip install -r requirements.txt

      # Optional cache for CFBD/requests (helps when backfilling)
      - name: Cache CFBD responses
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/http
            ~/.cache/pip
            ~/.cache/requests
            .cache
          key: cfbd-http-${{ runner.os }}-v1

      # --- Feature cache (penalties parquet) ---
      - name: Restore penalty features cache
        uses: actions/cache/restore@v4
        with:
          path: artifacts/features
          key: penalties-${{ runner.os }}-v1
          restore-keys: |
            penalties-${{ runner.os }}-

      # Validate config; if tuned config exists, use it
      - name: Apply tuned config (if present) + validate
        shell: bash
        run: |
          set -e
          if [ -f tuning-results/best_config.yaml ]; then
            echo "Using tuned config: tuning-results/best_config.yaml"
            cp tuning-results/best_config.yaml config.yaml
          else
            echo "No tuned config; using repo config.yaml"
          fi
          # Validate (repo has tools/validate_config.py)
          python -m tools.validate_config
          echo "validate_config done."

      # ------------- BACKFILL (switchable) ----------------
      - name: Backfill penalties (switchable: quick/full/skip)
        shell: bash
        run: |
          set -e

          SPEED="${{ github.event.inputs.speed }}"
          # Cron defaults to FULL if not passed
          if [ -z "$SPEED" ] && [ "${{ github.event_name }}" = "schedule" ]; then
            SPEED="full"
          fi
          # Manual default is QUICK
          if [ -z "$SPEED" ]; then
            SPEED="quick"
          fi

          run_stage () {
            local yrs="$1"
            echo "::group::penalties years=${yrs}"
            # -u = unbuffered; --verbose prints per-year progress
            python -u -m src.data_penalties --years "${yrs}" --windows 3,5,10 --min-games 3 --strict --verbose
            echo "::endgroup::"
          }

          echo "Backfill SPEED=${SPEED}"
          case "$SPEED" in
            skip)
              echo "Skipping penalties backfill (will rely on cache if present)."
              ;;
            quick)
              echo "Running QUICK backfill (2→1)…"
              run_stage 2 || true
              run_stage 1 || true
              ;;
            full)
              echo "Running FULL backfill (5→3→1)…"
              run_stage 5 || true
              run_stage 3 || true
              run_stage 1 || true
              ;;
            *)
              echo "Unknown SPEED=$SPEED"; exit 1;;
          esac

      - name: Save penalty features cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: artifacts/features
          key: penalties-${{ runner.os }}-v1

      # ----------------- PREDICT -----------------
      - name: Predict (scores + win prob)
        if: ${{ github.event.inputs.mode == 'predict' || github.event.inputs.mode == 'auto' || github.event_name == 'schedule' }}
        shell: bash
        run: |
          set -e
          # Win probabilities
          python -m src.predict --out artifacts/preds_winprob.json
          # Exact score predictions (if your repo provides it)
          if [ -f "src/score_predict.py" ]; then
            python -m src.score_predict --out artifacts/preds_scores.csv || true
          fi

      # ----------------- LABEL -------------------
      - name: Label
        if: ${{ github.event.inputs.mode == 'learn' || github.event.inputs.mode == 'auto' || github.event_name == 'schedule' }}
        shell: bash
        run: |
          set -e
          python -m src.labeler --out artifacts/labels.parquet

      # ----------------- LEARN -------------------
      - name: Learn (strict, real data only)
        if: ${{ github.event.inputs.mode == 'learn' || github.event.inputs.mode == 'auto' || github.event_name == 'schedule' }}
        shell: bash
        run: |
          set -e
          # Train the model using the latest features/labels
          python -m src.learn --features artifacts/features/penalties.parquet --labels artifacts/labels.parquet --out artifacts/model.joblib

      # ----------------- REPORT ------------------
      - name: Report
        if: ${{ github.event.inputs.mode == 'auto' || github.event_name == 'schedule' }}
        shell: bash
        run: |
          set -e
          # Email + Slack are optional; your reporter can no-op if not configured
          if [ -f "src/reporter.py" ]; then
            python -m src.reporter --artifacts artifacts || true
          fi

      # (Optional) Tune block – keep only if you use it
      - name: Tune
        if: ${{ github.event.inputs.mode == 'tune' }}
        shell: bash
        run: |
          set -e
          python -m src.tune --iters 50 --out tuning-results

      # Upload artifacts for debugging/inspection
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: run-artifacts
          path: |
            artifacts/**
            tuning-results/**
          if-no-files-found: ignore
