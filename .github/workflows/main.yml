name: Predict & Email

on:
  schedule:
    - cron: '30 12 * * *'   # daily 12:30 UTC (adjust if you want)
  workflow_dispatch:

jobs:
  predict:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Run predictor
        env:
          CFBD_API_KEY: ${{ secrets.CFBD_API_KEY }}
          SMTP_SERVER:  ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:    ${{ secrets.SMTP_PORT }}
          EMAIL_USER:   ${{ secrets.EMAIL_USER }}
          EMAIL_PASS:   ${{ secrets.EMAIL_PASS }}
          EMAIL_TO:     ${{ secrets.EMAIL_TO }}
        run: python main.py

      # ---- OPTIONAL/HELPER: make sure we end up with a predictions.csv the rest can read ----
      # 1) If your code wrote output/predictions.csv, copy it up one level
      - name: Normalize predictions.csv location (quick copy)
        run: |
          set -e
          mkdir -p output
          if [ ! -f "predictions.csv" ] && [ -f "output/predictions.csv" ]; then
            cp output/predictions.csv predictions.csv
            echo "Copied output/predictions.csv -> predictions.csv"
          fi
          echo "Listing repo root:"
          ls -la
          echo "Listing ./output:"
          ls -la output || true

      # 2) If predictions.csv STILL missing, auto-detect the best CSV in output/ and promote it.
      - name: Ensure predictions.csv exists (auto-detect)
        run: |
          set -e
          if [ -f "predictions.csv" ]; then
            echo "predictions.csv already present."
            exit 0
          fi
          python - << 'PY'
          import os, glob, sys
          import pandas as pd

          REQUIRED_ANY = {"game_id","id","gameId"}  # any one acceptable; we normalize later
          MODEL_ANY    = {"model_spread","pred_spread","spread_pred","modelSpread"}
          TOTAL_ANY    = {"model_total","pred_total","total_pred","modelTotal"}
          TEAM_ANY     = {"home","home_team","Home"}
          TEAM_ANY2    = {"away","away_team","Away"}

          candidates = sorted(glob.glob("output/*.csv"))
          best = None
          for path in reversed(candidates):  # prefer newest
              try:
                  df = pd.read_csv(path, nrows=50)
              except Exception:
                  continue
              cols = set(df.columns)
              has_id    = len(REQUIRED_ANY & cols) > 0
              has_sp    = len(MODEL_ANY    & cols) > 0
              has_tot   = len(TOTAL_ANY    & cols) > 0
              has_home  = len(TEAM_ANY     & cols) > 0
              has_away  = len(TEAM_ANY2    & cols) > 0
              if has_id and has_sp and has_tot and has_home and has_away:
                  best = path
                  break
          if best is None:
              print("No suitable CSV found in output/ with id/home/away/model_spread/ model_total (or variants).", file=sys.stderr)
              sys.exit(1)

          # promote to predictions.csv
          import shutil
          shutil.copy(best, "predictions.csv")
          print(f"Promoted {best} -> predictions.csv")
          PY

      # ---------- Standardize to edges + Exact Score ----------
      - name: Build edges CSV (standardize predictions)
        run: python -m src.make_edges

      - name: Generate exact-score probabilities
        run: python -m src.exact_score

      - name: Upload prediction artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: predictions_bundle
          path: |
            predictions.csv
            output/predictions.csv
            output/edges_*.csv
            output/exact_scores.csv
          if-no-files-found: ignore
