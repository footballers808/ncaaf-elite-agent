name: Main Run

on:
  # Run on Fridays (adjust to your preference)
  schedule:
    - cron: "23 11 * * 5"
  # Manual trigger
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: ncaaf-elite-agent-${{ github.ref_name }}
  cancel-in-progress: false

env:
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

  # ---- CFBD auth + rate limiting (tunable) ----
  CFBD_API_KEY: ${{ secrets.CFBD_API_KEY }}
  CFBD_MAX_RETRIES: "10"          # bump while backfilling; can lower later
  CFBD_BACKOFF_BASE_SEC: "0.8"    # base backoff
  CFBD_THROTTLE_MS: "400"         # min gap between calls (ms)

  # ---- Cache scopes ----
  CFBD_CACHE_SCOPE: cfbd-http-v1
  PENALTY_CACHE_SCOPE: penalties-Linux-v1

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt

      # ---- restore HTTP/cache before doing any CFBD calls ----
      - name: Restore CFBD/requests cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/requests_cache
            .cache/requests_cache
          key: ${{ env.CFBD_CACHE_SCOPE }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.CFBD_CACHE_SCOPE }}-

      - name: Sanity import check
        run: |
          python - <<'PY'
          import importlib
          mods = [
            "src.tools.validate_config",
            "src.data_penalties",
            "src.features",
            "src.predict",
            "src.labeler",
            "src.learn",
            "src.reporter",
          ]
          for m in mods:
            try:
              importlib.import_module(m)
            except Exception as e:
              raise SystemExit(f"import failed: {m}: {e}")
          print("imports ok")
          PY

      - name: Show run config
        run: |
          echo "CFBD key present: $([ -n "$CFBD_API_KEY" ] && echo yes || echo no)"
          echo "retries=$CFBD_MAX_RETRIES throttle_ms=$CFBD_THROTTLE_MS backoff=$CFBD_BACKOFF_BASE_SEC"
          echo "---- config.yaml (first 200 chars) ----"
          head -c 200 config.yaml || true
          echo

      # =========================
      #   BUILD / BACKFILL
      # =========================
      - name: Backfill penalties (staged 5-3-1)
        run: |
          set -e
          echo "== build penalties: 5 seasons strict =="
          python -m src.data_penalties --years 5 --windows 3,5,10 --strict
          echo "== build penalties: 3 seasons strict =="
          python -m src.data_penalties --years 3 --windows 3,5,10 --strict
          echo "== build penalties: 1 season strict =="
          python -m src.data_penalties --years 1 --windows 3,5,10 --strict

      # Save only AFTER we've generated features to avoid "path not found" cache warnings
      - name: Save penalty features cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: artifacts/features
          key: ${{ env.PENALTY_CACHE_SCOPE }}-${{ github.sha }}

      # =========================
      #   PREDICT / LABEL / NEWS
      # =========================
      - name: Predict (scores + win prob)
        run: |
          set -e
          test -f artifacts/features/penalties.parquet || { echo "missing artifacts/features/penalties.parquet"; exit 1; }
          python -m src.predict --features artifacts/features/penalties.parquet --out artifacts/preds.parquet

      - name: Label completed games
        run: |
          set -e
          Y=$(date -u +%Y)
          python -m src.labeler --year "$Y" --season-type regular

      - name: News enrichment (optional)
        run: |
          set -e
          if [ -f data/news_feed.csv ]; then
            # If you have src/news.py that builds a news parquet, call it here:
            python -m src.news --in data/news_feed.csv --out artifacts/features/news.parquet
          else
            echo "No data/news_feed.csv; skipping news enrichment"
          fi

      # =========================
      #   LEARN / REPORT
      # =========================
      - name: Learn (strict, real data)
        run: |
          set -e
          test -f artifacts/features/penalties.parquet || { echo "missing penalties parquet"; exit 1; }
          if [ -f artifacts/labels.parquet ]; then
            python -m src.learn --features artifacts/features/penalties.parquet --labels artifacts/labels.parquet --out artifacts/model.joblib
          else
            echo "No labels yet; skipping learn"
          fi

      - name: Report
        run: |
          set -e
          if [ -f artifacts/preds.parquet ]; then
            python -m src.reporter --preds artifacts/preds.parquet --out artifacts/report.md
          else
            printf "# NCAAF Elite Agent\n\n(no predictions this run)\n" > artifacts/report.md
          fi

      # =========================
      #   UPLOAD ARTIFACTS
      # =========================
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-artifacts
          path: |
            artifacts/**
            tuning-results/**
          if-no-files-found: ignore
