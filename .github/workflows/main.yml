name: NCAAF Elite Agent

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Mode to run"
        required: true
        default: "predict"
      week:
        description: "ISO week (yyyy-ww) or 'auto'"
        required: false
        default: "auto"
      commit_best:
        description: "If 'true', open a PR applying the merged tuned config"
        required: false
        default: "false"
  schedule:
    # Weekly learning/report every Monday 06:00 America/Phoenix (13:00 UTC)
    - cron: "0 13 * * 1"

permissions:
  contents: write

concurrency:
  group: ncaaf-elite-agent-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      PYTHONDONTWRITEBYTECODE: "1"
      CFBD_API_KEY: ${{ secrets.CFBD_API_KEY }}
      SMTP_HOST:     ${{ secrets.SMTP_HOST }}
      SMTP_PORT:     ${{ secrets.SMTP_PORT }}
      SMTP_USER:     ${{ secrets.SMTP_USER }}
      SMTP_PASS:     ${{ secrets.SMTP_PASS }}
      FROM_ADDR:     ${{ secrets.FROM_ADDR }}
      TO_ADDRS:      ${{ secrets.TO_ADDRS }}      # comma-separated
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }} # optional

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      # ðŸ”§ Only try to restore prior tuned artifacts when NOT tuning.
      - name: Restore tuned config (if exists)
        if: ${{ github.event.inputs.mode != 'tune' }}
        uses: actions/download-artifact@v4
        with:
          name: tuning-results
          path: tuning-results
        continue-on-error: true

      # ðŸ”§ Skip apply/validate during 'tune' mode
      - name: Apply tuned config (if present) + validate
        if: ${{ github.event.inputs.mode != 'tune' && github.event.inputs.mode != '' }}
        run: |
          if [ -f tuning-results/best_config.yaml ]; then
            echo "Found tuning-results/best_config.yaml"
            python tools/apply_best_config.py
            cp config.merged.yaml config.yaml
          else
            echo "No tuning best_config.yaml found; proceeding with current config.yaml"
          fi
          python tools/validate_config.py

      # -------- MODES --------

      - name: Predict
        if: ${{ github.event.inputs.mode == 'predict' }}
        run: |
          python -m src.predict --week "${{ github.event.inputs.week }}" --out artifacts/predictions.csv
          python -m src.odds   --week "${{ github.event.inputs.week }}" --out artifacts/market_lines.csv
          python -m src.edges  --pred artifacts/predictions.csv --lines artifacts/market_lines.csv --out artifacts/edges.csv
          python -m src.report --week "${{ github.event.inputs.week }}" --pred artifacts/predictions.csv --edges artifacts/edges.csv --out artifacts/report.html

      - name: Label
        if: ${{ github.event.inputs.mode == 'label' }}
        run: |
          python -m src.label --week "${{ github.event.inputs.week }}" --out artifacts/labels.csv

      - name: Learn
        if: ${{ github.event.inputs.mode == 'learn' }}
        run: |
          python -m src.learn --labels artifacts/labels.csv --save artifacts/model.bin
          python -m src.eval  --report artifacts/learn-eval.json --calibration artifacts/calibration.png

      - name: Report
        if: ${{ github.event.inputs.mode == 'report' }}
        run: |
          python -m src.report --week "${{ github.event.inputs.week }}" --pred artifacts/predictions.csv --edges artifacts/edges.csv --out artifacts/report.html

      - name: Backtest
        if: ${{ github.event.inputs.mode == 'backtest' }}
        run: |
          python -m src.backtest --years 5 --out artifacts/backtest.json
          if [ -f tuning-results/best_config.yaml ]; then
            python -m src.tune --mode verify-best --in tuning-results/best_config.yaml --out artifacts/tune-verify.json || true
          fi

      - name: Tune
        if: ${{ github.event.inputs.mode == 'tune' }}
        env:
          TUNE_ITERS: "60"
        run: |
          python -m src.tune

      # -------- ARTIFACTS --------
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-artifacts
          path: |
            artifacts/**
            tuning-results/**
          if-no-files-found: ignore
          retention-days: 7

      # -------- OPTIONAL: PR to apply merged tuned config --------
      - name: Commit merged tuned config to branch
        if: ${{ github.event.inputs.commit_best == 'true' && hashFiles('config.merged.yaml') != '' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          BR="auto/best-config-${{ github.run_id }}"
          git checkout -b "$BR"
          cp config.merged.yaml config.yaml
          git add config.yaml
          git commit -m "chore: apply best_config.yaml (run ${{ github.run_id }})"
          git push -u origin "$BR"
          echo "PR step skipped unless GH CLI is installed."

      # -------- EMAIL REPORT --------
      - name: Email report
        if: ${{ env.SMTP_HOST != '' && (github.event.inputs.mode == 'predict' || github.event.inputs.mode == 'report') }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ env.SMTP_HOST }}
          server_port: ${{ env.SMTP_PORT }}
          username: ${{ env.SMTP_USER }}
          password: ${{ env.SMTP_PASS }}
          subject: "NCAAF Agent â€“ ${{ github.event.inputs.mode }} â€“ run ${{ github.run_id }}"
          from: ${{ env.FROM_ADDR }}
          to: ${{ env.TO_ADDRS }}
          content_type: text/html
          convert_markdown: false
          attachments: |
            artifacts/report.html
            artifacts/edges.csv
            artifacts/predictions.csv

      # -------- OPTIONAL SLACK --------
      - name: Slack webhook
        if: ${{ env.SLACK_WEBHOOK != '' && (github.event.inputs.mode == 'predict' || github.event.inputs.mode == 'report') }}
        run: |
          if [ -f artifacts/edges.csv ]; then
            MSG="Edges ready for ${{ github.event.inputs.mode }} (run ${{ github.run_id }})"
          else
            MSG="No edges.csv found for ${{ github.event.inputs.mode }} (run ${{ github.run_id }})"
          fi
          curl -X POST -H "Content-type: application/json" \
            --data "{\"text\":\"${MSG}\"}" "$SLACK_WEBHOOK"
